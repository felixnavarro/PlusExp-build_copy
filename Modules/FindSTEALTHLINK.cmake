# Find the StealthLink2.0 Libraries
# This module defines
# STEALTHLINK_INCLUDE_DIRS - STEALTHLINK header files
# STEALTHLINK_STEALTHLINK_STATIC_LIBRARY  - STEALTHLINK static library
# STEALTHLINK_STEALTHLINK_SHARED_LIBRARY  - STEALTHLINK shared library (only on Windows)
# STEALTHLINK_STEALTHLINKD_STATIC_LIBRARY - STEALTHLINK static library with debug info (only on Windows)
# STEALTHLINK_STEALTHLINKD_SHARED_LIBRARY - STEALTHLINK shared library with debug info (only on Windows)
#

SET( STEALTHLINK_PATH_HINTS
  ../StealthLink-2.1.0
  ../PLTools/StealthLink-2.1.0
  ../../PLTools/StealthLink-2.1.0
  ../trunk/PLTools/StealthLink-2.1.0
  ${CMAKE_CURRENT_BINARY_DIR}/StealthLink-2.1.0
  )

IF (WIN32)
  IF((NOT ${CMAKE_GENERATOR} MATCHES "Visual Studio 10") AND (NOT ${CMAKE_GENERATOR} MATCHES "Visual Studio 12 2013"))
    MESSAGE(FATAL_ERROR "Error: StealthLink can only be built using Visual Studio 2010 or 2013")
  ENDIF()

  SET( PLATFORM_SUFFIX "/windows")
  IF(${CMAKE_GENERATOR} MATCHES "Visual Studio 10")
    SET( PLATFORM_SUFFIX ${PLATFORM_SUFFIX}/VS2010)
  ELSEIF(${CMAKE_GENERATOR} MATCHES "Visual Studio 12 2013")
    SET( PLATFORM_SUFFIX ${PLATFORM_SUFFIX}/VS2013)
  ENDIF()

  IF (CMAKE_CL_64)
    SET( PLATFORM_SUFFIX "${PLATFORM_SUFFIX}/x64")
  ELSE()
    SET( PLATFORM_SUFFIX "${PLATFORM_SUFFIX}/Win32")
  ENDIF()

  SET( PLATFORM_SUFFIXD "${PLATFORM_SUFFIX}/Debug")
  SET( PLATFORM_SUFFIX "${PLATFORM_SUFFIX}/Release")

ELSE()
  # TODO: Linux
  MESSAGE(FATAL_ERROR "Error: StealthLink is not currently supported on Linux")
ENDIF()

FIND_PATH (STEALTHLINK_INCLUDE_DIRS
  NAMES "StealthLink/Stealthlink.h"
  PATHS ${STEALTHLINK_PATH_HINTS}
  DOC "Include directory, i.e. parent directory of directory \"StealthLink\""
  )
FIND_LIBRARY (STEALTHLINK_STEALTHLINK_STATIC_LIBRARY
  NAMES StealthLink
  PATH_SUFFIXES ${PLATFORM_SUFFIX}
  PATHS ${STEALTHLINK_PATH_HINTS}
  )

IF (WIN32)
  FIND_FILE (STEALTHLINK_STEALTHLINK_SHARED_LIBRARY
    NAMES StealthLink${CMAKE_SHARED_LIBRARY_SUFFIX}
    PATH_SUFFIXES ${PLATFORM_SUFFIX}
    PATHS ${STEALTHLINK_PATH_HINTS}
    )
  FIND_LIBRARY (STEALTHLINK_STEALTHLINKD_STATIC_LIBRARY
    NAMES StealthLink
    PATH_SUFFIXES ${PLATFORM_SUFFIXD}
    PATHS ${STEALTHLINK_PATH_HINTS}
    )
  FIND_FILE (STEALTHLINK_STEALTHLINKD_SHARED_LIBRARY
    NAMES StealthLink${CMAKE_SHARED_LIBRARY_SUFFIX}
    PATH_SUFFIXES ${PLATFORM_SUFFIXD}
    PATHS ${STEALTHLINK_PATH_HINTS}
    )
ENDIF()

INCLUDE(FindPackageHandleStandardArgs)
IF (WIN32)
  FIND_PACKAGE_HANDLE_STANDARD_ARGS(STEALTHLINK DEFAULT_MSG
    STEALTHLINK_INCLUDE_DIRS
    STEALTHLINK_STEALTHLINK_STATIC_LIBRARY
    STEALTHLINK_STEALTHLINK_SHARED_LIBRARY
    STEALTHLINK_STEALTHLINKD_STATIC_LIBRARY
    STEALTHLINK_STEALTHLINKD_SHARED_LIBRARY
    )
ELSE()
  FIND_PACKAGE_HANDLE_STANDARD_ARGS(STEALTHLINK DEFAULT_MSG
    STEALTHLINK_INCLUDE_DIRS
    STEALTHLINK_STEALTHLINK_STATIC_LIBRARY
    )
ENDIF()
